#!/usr/bin/perl -w

# ABSTRACT: Run Pod::Weaver on a file or distribution.

use warnings;
use strict;

#  Ensure I'm using my devel modules when running from my devel dir.
use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../../../Pod-Weaver-Role-SectionReplacer/src/lib";
use lib "$FindBin::Bin/../../../Pod-Weaver-PluginBundle-ReplaceBoilerplate/src/lib";

use Getopt::Long;
use Pod::Usage;

use File::Find;
use File::Slurp;
use File::Copy;

use PPI::Document;

use Pod::Elemental;
use Pod::Elemental::Transformer::Pod5;

use Pod::Weaver;

use CPAN::Meta;

# ---------------------------------------------------------------------------

my $help    = 0;
my $man     = 0;

my $verbose          = 0;
my $write_to_dot_new = 0;
my $no_backup        = 0;
my $antispam         = '';

Getopt::Long::Configure( 'gnu_getopt' );
Getopt::Long::GetOptions(
    'help|?|h'                => \$help,
    'man'                     => \$man,
    'verbose|v+'              => \$verbose,
    'new'                     => \$write_to_dot_new,
    'nobackup'                => \$no_backup,
    'antispam=s'              => \$antispam,
    ) or pod2usage( 2 );

pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;

# ---------------------------------------------------------------------------

my %levels = (
    'detail' => 3,
    'cmd'    => 3,
    'data'   => 0,
    'action' => 0,
    'less'   => 0,
    );

sub show($$)
{
    my ( $level, $message ) = @_;

    print $message if $verbose >= $levels{ $level };
}

#  TODO: should be from config somewhere.
my $skip_regexp = qr/(?:\.(?:bak|new)|\~)$/;

# ---------------------------------------------------------------------------

#  META.json bits.
my ( $meta, $license, @authors, $dist_version );

#  Other objects.
my ( $weaver );

sub build_dist_info
{
    if( -r 'META.json' )
    {
        show( 'detail', "Reading META.json\n" );
        $meta = CPAN::Meta->load_file( 'META.json' );
    }
    elsif( -r 'META.yml' )
    {
        show( 'detail', "Reading META.yml\n" );
        $meta = CPAN::Meta->load_file( 'META.yml' );
    }
    else
    {
        warn "No META.json or META.yml file found, are you running in a distribution directory?\n";
    }

    if( $meta )
    {
        @authors = $meta->authors();

        @authors = map { s/\@/ $antispam /; $_; } @authors if $antispam;

        show( 'detail', "Creating license object\n" );
        my @licenses = $meta->licenses();
        die "Pod::Weaver requires one, and only one, license at a time.\n"
            if @licenses != 1;

        $license = $licenses[ 0 ];

        #  Cribbed from Module::Build, really should be in Software::License.
        my %licenses = (
            perl         => 'Perl_5',
            perl_5       => 'Perl_5',
            apache       => 'Apache_2_0',
            apache_1_1   => 'Apache_1_1',
            artistic     => 'Artistic_1_0',
            artistic_2   => 'Artistic_2_0',
            lgpl         => 'LGPL_2_1',
            lgpl2        => 'LGPL_2_1',
            lgpl3        => 'LGPL_3_0',
            bsd          => 'BSD',
            gpl          => 'GPL_1',
            gpl2         => 'GPL_2',
            gpl3         => 'GPL_3',
            mit          => 'MIT',
            mozilla      => 'Mozilla_1_1',
            open_source  => undef,
            unrestricted => undef,
            restrictive  => undef,
            unknown      => undef,
            );
        die "Unknown license: $license\n" unless $licenses{ $license };
        $license = $licenses{ $license };

        my $class = "Software::License::$license";
        eval "use $class; 1"
            or die "Can't load Software::License::$license: $@";

        $license = $class->new( {
            holder => join( ' & ', @authors ),
            } );

        show( 'detail', "Using license: " . $license->name() . "\n" );

        $dist_version = $meta->version();
    }
}

sub build_weaver
{
    if( -r 'weaver.ini' )
    {
        show( 'detail', "Initializing weaver from ./weaver.ini\n" );
        $weaver = Pod::Weaver->new_from_config( {
            root => '',
            } );
    }
    else
    {
        warn "No ./weaver.ini found, using Pod::Weaver defaults, this will most likely insert duplicate sections";
        $weaver = Pod::Weaver->new_with_default_config();
    }
}

build_dist_info();
build_weaver();

my @files = ();

File::Find::find(
    {
        wanted   =>
            sub
            {
                return if -d $_ or $_ =~ $skip_regexp;
                push @files, $_;
            },
        no_chdir => 1,
    },
    grep { -d $_ } qw/lib bin script/ );

#  TODO: check we found something.

foreach my $module_file ( @files )
{
    show( 'action', "Processing $module_file\n" );
#next;

    #  From here and below is mostly hacked out from
    #    Dist::Zilla::Plugin::PodWeaver

    my $perl = File::Slurp::read_file( $module_file );

    my $ppi_document = PPI::Document->new(\$perl);
    warn( PPI::Document->errstr ) unless $ppi_document;

    #  Pod::Weaver::Section::Name croaks if there's no package line.
    next unless $ppi_document->find_first( 'PPI::Statement::Package' );

    #  If they have some pod after __END__ then assume it's safe to put
    #  it all there.
    my $pod_after_end =
        ( $ppi_document->find( 'PPI::Statement::End' ) and
          grep { $_->find_first( 'PPI::Token::Pod' ) }
              @{$ppi_document->find( 'PPI::Statement::End' )} ) ?
        1 : 0;

    my @pod_tokens =
        map { "$_" } @{ $ppi_document->find( 'PPI::Token::Pod' ) || [] };
    $ppi_document->prune( 'PPI::Token::Pod' );

    if( $ppi_document->serialize =~ /^=[a-z]/m )
    {
        #  TODO: no idea what the problem is here, but DZP::PodWeaver had it...
        warn "Can't do podweave on $module_file: there is POD inside string literals";
        next;
    }

    my $pod_str = join "\n", @pod_tokens;
    my $pod_document = Pod::Elemental->read_string( $pod_str );

    Pod::Elemental::Transformer::Pod5->new->transform_node( $pod_document );

    my %weave_args = (
        pod_document => $pod_document,
        ppi_document => $ppi_document,
        filename => $module_file,
        );
    $weave_args{ license } = $license if $license;
    #  FIXME: erk, not right at all if the module version differs...
    $weave_args{ version } = $dist_version if $dist_version;
    $weave_args{ authors } = \@authors     if @authors;

    #  TODO: Try::Tiny this, it can croak.
    $pod_document = $weaver->weave_document( \%weave_args );

    my $new_pod = $pod_document->as_pod_string;

    my $end = do {
        my $end_elem = $ppi_document->find( 'PPI::Statement::Data' )
                    || $ppi_document->find( 'PPI::Statement::End' );
        join q{}, @{ $end_elem || [] };
        };

    $ppi_document->prune( 'PPI::Statement::End' );
    $ppi_document->prune( 'PPI::Statement::Data' );

    my $new_perl = $ppi_document->serialize;
    $new_perl =
        $end ? ( $pod_after_end ?
        "$new_perl$end$new_pod" :
        "$new_perl\n\n$new_pod\n\n$end" ) :
        "$new_perl\n__END__\n$new_pod\n";

    if( $perl eq $new_perl )
    {
        show( 'detail', "  Unchanged\n" );
        next
    }

    my $output_file = $write_to_dot_new ?
        ( $module_file . '.new' ) : $module_file;
    my $backup_file = $module_file . '.bak';

    unless( $write_to_dot_new or $no_backup )
    {
        unlink( $backup_file );
        copy( $module_file, $backup_file );
    }

    show( 'detail', "  Writing new $output_file\n" );
    #  We want to preserve permissions and other stuff, so we open
    #  it for read/write.
    my $fh = IO::File->new( $output_file, $write_to_dot_new ? '>' : '+<' );
    unless( $fh )
    {
        warn "Unable to write to $output_file: $!";
        next;
    }
    $fh->truncate( 0 );
    $fh->print( $new_perl );
    $fh->close();
}

#  Fudge to let Pod::Weaver::Section::Name work without dying.
package podweaver;

1;

__END__

=pod

=head1 NAME

podweaver - Run Pod::Weaver on a file or distribution.

=head1 SYNOPSIS

podweaver [options]

 Options:
   -v, --verbose     increase verbosity
   --new             write to *.new files rather than overwriting existing
   --nobackup        skip generating *.bak files when editing files
   --antispam=str    replace @ in author emails with 'str'.
   --help            brief help message
   --man             full documentation

=head1 OPTIONS

=over 8

=item B<--new>

Write the modified version of a file to a new file based on the original
filename with a C<.new> extension, rather than the default behaviour of
overwriting the original.

When B<--new> is supplied, no *.bak backup of the original is created (since
the original is left untouched.)

=item B<--nobackup>

Skips the production of *.bak backups for any changed files.
Be warned, this could result in loss of the file contents if anything goes
wrong, use with caution. (Or better still, use with your changes safely
commited to the VCS of your choice.)

=item B<--antispam=>I<string>

Replaces the @ in author email addresses with the supplied string as an
anti-spam measure.
Given that the original email is still within the META.yml, this will not
prevent all spam harvesting, but it may at least help.

=item B<-v>, B<--verbose>

Increases the level of messages displayed.

=item B<--help>, B<-h>, B<-H>, B<-?>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

L<podweaver> will run L<Pod::Weaver> across all files in a distribution,
editing them in place and leaving a backup of the original in
I<original>.bak.

This was designed to run with the
L<Pod::Weaver::PluginBundle::ReplaceBoilerplate> plugin, so you can
run L<podweaver> as part of your release process to update the boilerplate
and other automatically generated POD in your source files, rather than
the default L<Pod::Weaver> behaviour of appending.

To use L<podweaver> it is suggested you place a C<weaver.ini> file in
the root of your distribution with contents similar to:

  [@ReplaceBoilerplate]

If no C<weaver.ini> is provided then the default L<Pod::Weaver> settings
are used, which will continuously append duplicate sections each time you
run L<podweaver>.

L<podweaver> expects to be run in the root of your distribution, and will
look for a META.json or META.yml file to extract details such as the author,
licence and version.  If no META file is found then it will issue a warning,
but still run, which may result in some sections being missing from the
final POD, it is recommended that you run L<podweaver> again after you've
generated your META file.

Currently L<podweaver> looks in the C<lib>, C<bin> and C<script> dirs for
modules or scripts that should be woven.
This should probably be configurable.

Please see the documentation in L<App::podweaver> for bugs and issues.

=head1 VERSION

version 0.99_01

=head1 AUTHOR

Sam Graham <libapp-podweaver-perl@illusori.co.uk>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2010 by Sam Graham <libapp-podweaver-perl@illusori.co.uk>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
